--Inserting data to Customer Table
INSERT INTO CUSTOMER(FIRST_NAME,LAST_NAME,ADDRESS,DOB) VALUES ('John','Rudolph','513 Mlk St, Sacramento, CA','25-01-1995');
INSERT INTO CUSTOMER(FIRST_NAME,LAST_NAME,ADDRESS,DOB) VALUES ('Samantha', 'Lee', '1234 Elm St, San Diego, CA', '04-12-1995');
INSERT INTO CUSTOMER(FIRST_NAME,LAST_NAME,ADDRESS,DOB) VALUES ('John', 'Doe', '5678 Maple Ave, New York, NY', '08-11-1987');
INSERT INTO CUSTOMER(FIRST_NAME,LAST_NAME,ADDRESS,DOB) VALUES ('Emily', 'Smith', '9876 Oak Dr, Chicago, IL', '02-12-1992');
INSERT INTO CUSTOMER(FIRST_NAME,LAST_NAME,ADDRESS,DOB) VALUES ('Michael', 'Johnson', '4321 Cedar Ln, Houston, TX', '11-03-1979');
INSERT INTO CUSTOMER(FIRST_NAME,LAST_NAME,ADDRESS,DOB) VALUES ('Avery', 'Williams', '2468 Pine St, Miami, FL', '06-04-1985');
INSERT INTO CUSTOMER(FIRST_NAME,LAST_NAME,ADDRESS,DOB) VALUES ('Benjamin', 'Davis', '1357 Birch Rd, Seattle, WA', '09-10-1998');
INSERT INTO CUSTOMER(FIRST_NAME,LAST_NAME,ADDRESS,DOB) VALUES ('Sophia', 'Martinez', '3690 Walnut St, Boston, MA', '01-08-1990');
INSERT INTO CUSTOMER(FIRST_NAME,LAST_NAME,ADDRESS,DOB) VALUES ('Oliver', 'Garcia', '9753 Willow Dr, Dallas, TX', '07-12-1982');
INSERT INTO CUSTOMER(FIRST_NAME,LAST_NAME,ADDRESS,DOB) VALUES ('Mia', 'Rodriguez', '8024 Laurel Ave, San Francisco, CA', '03-04-1997');
INSERT INTO CUSTOMER(FIRST_NAME,LAST_NAME,ADDRESS,DOB) VALUES ('Lucas', 'Hernandez', '6412 Rose St, Philadelphia, PA', '10-11-1988');
INSERT INTO CUSTOMER(FIRST_NAME,LAST_NAME,ADDRESS,DOB) VALUES ('Isabella', 'Lopez', '2468 Pine St, Austin, TX', '05-02-1994');

--Inserting data to Article Table
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('Home Cleaning Made Easy', 'The CleanLife Steam Cleaner and SmartClean Robot Vacuum Cleaner work together to make cleaning your home a breeze.');
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('Cooking Essentials for Any Home', 'The CookEasy Non-Stick Cookware Set and CookEasy Silicone Spatula Set are must-haves for any home cook.');
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('Wireless Audio for On-the-Go Convenience', 'The SoundTech Wireless Earbuds let you enjoy music and stay connected while on the road.');
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('Soothing Skin Care for Any Season', 'The Aloe Vera Gel from NaturalCare and ClearSkin Facial Cleanser work together to keep your skin healthy and glowing.');
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('Home Fragrances for a Relaxing Atmosphere', 'The AromaHome Scented Reed Diffuser create a relaxing atmosphere in your home.');
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('Workout Essentials for Your Home Gym', 'The GymGear Adjustable Weight Bench help you get fit at home.');
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('Tech Accessories for Your Phone', 'The TechMount Magnetic Phone Mount keeps your phone charged and accessible on the go.');
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('Plant Care Products for Healthy Plants', 'The GreenGrow Plant Fertilizer keep your plants healthy and thriving.');
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('Cozy Essentials for Home Comfort', 'The CozyWear Cotton Sweatshirt help you relax and stay comfortable at home.');
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('Cat Essentials for Happy Felines', 'The PetPals Cat food help keep your cats healthy and happy.');
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('GamersChoice Mechanical Keyboard: The Ultimate Gaming Accessory', 'Take your gaming to the next level with our GamersChoice Mechanical Keyboard.');
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('PackSmart Travel Packing Cubes: Stay Organized on the Go', 'Stay organized while traveling with our PackSmart Travel Packing Cubes.');
INSERT INTO ARTICLE (ARTICLE_NAME, ARTICLE_DESCRIPTION) VALUES ('AutoMax Car Charger: Charge Your Devices on the Go', 'Charge your devices on the go with our AutoMax Car Charger.');

--Inserting data to Product Table
INSERT INTO PRODUCT (PRODUCT_NAME, PRODUCT_TYPE, BRAND, VALIDITY, ARTICLE_ID, PREVIOUS_COUNT) VALUES ('Steam Cleaner', 'Home Appliances', 'CleanLife', '09-01-2024',100, 0);  
INSERT INTO PRODUCT (PRODUCT_NAME, PRODUCT_TYPE, BRAND, VALIDITY, ARTICLE_ID, PREVIOUS_COUNT) VALUES ('Wireless Earbuds', 'Electronics', 'SoundTech', '12-11-2023',102, 0); 
INSERT INTO PRODUCT (PRODUCT_NAME, PRODUCT_TYPE, BRAND, VALIDITY, ARTICLE_ID, PREVIOUS_COUNT) VALUES ('Aloe Vera Gel', 'Personal Care', 'NaturalCare', '06-05-2023',103, 0); 
INSERT INTO PRODUCT (PRODUCT_NAME, PRODUCT_TYPE, BRAND, VALIDITY, ARTICLE_ID, PREVIOUS_COUNT) VALUES ('Non-Stick Cookware Set', 'Kitchenware', 'CookEasy', '03-01-2025',101, 0); 
INSERT INTO PRODUCT (PRODUCT_NAME, PRODUCT_TYPE, BRAND, VALIDITY, ARTICLE_ID, PREVIOUS_COUNT) VALUES ('Mechanical Keyboard', 'Gaming Accessories', 'GamersChoice', '11-10-2024',110, 0); 
INSERT INTO PRODUCT (PRODUCT_NAME, PRODUCT_TYPE, BRAND, VALIDITY, ARTICLE_ID, PREVIOUS_COUNT) VALUES ('Silicone Spatula Set', 'Kitchenware', 'CookEasy', '07-11-2024',101, 0); 
INSERT INTO PRODUCT (PRODUCT_NAME, PRODUCT_TYPE, BRAND, VALIDITY, ARTICLE_ID, PREVIOUS_COUNT) VALUES ('Facial Cleanser', 'Skincare', 'ClearSkin', '09-10-2023',103, 0); 
INSERT INTO PRODUCT (PRODUCT_NAME, PRODUCT_TYPE, BRAND, VALIDITY, ARTICLE_ID, PREVIOUS_COUNT) VALUES ('Adjustable Weight Bench', 'Fitness Equipment', 'GymGear', '07-01-2025',105, 0);  
INSERT INTO PRODUCT (PRODUCT_NAME, PRODUCT_TYPE, BRAND, VALIDITY, ARTICLE_ID, PREVIOUS_COUNT) VALUES ('Robot Vacuum Cleaner', 'Home Appliances', 'SmartClean', '08-11-2023',100, 0);  
INSERT INTO PRODUCT (PRODUCT_NAME, PRODUCT_TYPE, BRAND, VALIDITY, ARTICLE_ID, PREVIOUS_COUNT) VALUES ('Cotton Sweatshirt', 'Clothing', 'CozyWear', '02-08-2025', 108, 0); 
INSERT INTO PRODUCT (PRODUCT_NAME, PRODUCT_TYPE, BRAND, VALIDITY, PREVIOUS_COUNT) VALUES ('Patanjali Toothpaste', 'Personal Care', 'Patanjali', '01-12-2025', 0); 

--Inserting data to Wishlist Table
INSERT INTO WISHLIST (PRODUCT_ID,CUSTOMER_ID,PREFERENCES) VALUES (1000,202350,1);
INSERT INTO WISHLIST (PRODUCT_ID,CUSTOMER_ID,PREFERENCES) VALUES (1001,202350,1);
INSERT INTO WISHLIST (PRODUCT_ID,CUSTOMER_ID,PREFERENCES) VALUES (1002,202350,2);
INSERT INTO WISHLIST (PRODUCT_ID,CUSTOMER_ID,PREFERENCES) VALUES (1001,202356,1);
INSERT INTO WISHLIST (PRODUCT_ID,CUSTOMER_ID,PREFERENCES) VALUES (1003,202356,2);
INSERT INTO WISHLIST (PRODUCT_ID,CUSTOMER_ID,PREFERENCES) VALUES (1000,202354,1);
INSERT INTO WISHLIST (PRODUCT_ID,CUSTOMER_ID,PREFERENCES) VALUES (1009,202354,1);
INSERT INTO WISHLIST (PRODUCT_ID,CUSTOMER_ID,PREFERENCES) VALUES (1008,202358,2);
INSERT INTO WISHLIST (PRODUCT_ID,CUSTOMER_ID,PREFERENCES) VALUES (1007,202358,1);
INSERT INTO WISHLIST (PRODUCT_ID,CUSTOMER_ID,PREFERENCES) VALUES (1005,202358,2);

--Inserting data to Orders Table
INSERT INTO ORDERS (CUSTOMER_ID,ORDER_DATE,PAYMENT_TYPE,ORDER_TOTAL) VALUES (202352,'03-05-2023','Credit card',55);
INSERT INTO ORDERS (CUSTOMER_ID,ORDER_DATE,PAYMENT_TYPE,ORDER_TOTAL) VALUES (202354,'03-11-2023','Paypal',58);
INSERT INTO ORDERS (CUSTOMER_ID,ORDER_DATE,PAYMENT_TYPE,ORDER_TOTAL) VALUES (202350,'03-12-2023','Paypal',150);
INSERT INTO ORDERS (CUSTOMER_ID,ORDER_DATE,PAYMENT_TYPE,ORDER_TOTAL) VALUES (202356,'03-08-2023','Gift card',200);
INSERT INTO ORDERS (CUSTOMER_ID,ORDER_DATE,PAYMENT_TYPE,ORDER_TOTAL) VALUES (202358,'04-01-2023','Credit card',100);
INSERT INTO ORDERS (CUSTOMER_ID,ORDER_DATE,PAYMENT_TYPE,ORDER_TOTAL) VALUES (202360,'04-09-2023','Gift card',79);
INSERT INTO ORDERS (CUSTOMER_ID,ORDER_DATE,PAYMENT_TYPE,ORDER_TOTAL) VALUES (202362,'04-07-2023','Credit card',36);
INSERT INTO ORDERS (CUSTOMER_ID,ORDER_DATE,PAYMENT_TYPE,ORDER_TOTAL) VALUES (202368,'04-12-2023','EBT',40);
INSERT INTO ORDERS (CUSTOMER_ID,ORDER_DATE,PAYMENT_TYPE,ORDER_TOTAL) VALUES (202364,'04-08-2023','Credit card',85);
INSERT INTO ORDERS (CUSTOMER_ID,ORDER_DATE,PAYMENT_TYPE,ORDER_TOTAL) VALUES (202366,'04-05-2023','EBT',110);
INSERT INTO ORDERS (CUSTOMER_ID,ORDER_DATE,PAYMENT_TYPE,ORDER_TOTAL) VALUES (202362,'04-05-2023','Credit card',300);

--Inserting data to Order_Items Table
INSERT INTO ORDER_ITEMS (ORDER_ID,PRODUCT_ID,QUANTITY,DISCOUNT,DELIVERY_MODE,WEIGHT_LB) VALUES (1111,1000,3,5,'Standard',10);
INSERT INTO ORDER_ITEMS (ORDER_ID,PRODUCT_ID,QUANTITY,DISCOUNT,DELIVERY_MODE,WEIGHT_LB) VALUES (1111,1003,1,2,'Pickup',8);
INSERT INTO ORDER_ITEMS (ORDER_ID,PRODUCT_ID,QUANTITY,DISCOUNT,DELIVERY_MODE,WEIGHT_LB) VALUES (1111,1004,1,4,'Express',2.5);
INSERT INTO ORDER_ITEMS (ORDER_ID,PRODUCT_ID,QUANTITY,DISCOUNT,DELIVERY_MODE,WEIGHT_LB) VALUES (1122,1005,2,1,'Pickup',1);
INSERT INTO ORDER_ITEMS (ORDER_ID,PRODUCT_ID,QUANTITY,DISCOUNT,DELIVERY_MODE,WEIGHT_LB) VALUES (1133,1007,1,100,'Pickup',100);
INSERT INTO ORDER_ITEMS (ORDER_ID,PRODUCT_ID,QUANTITY,DISCOUNT,DELIVERY_MODE,WEIGHT_LB) VALUES (1144,1006,3,0,'Standard',0.2);
INSERT INTO ORDER_ITEMS (ORDER_ID,PRODUCT_ID,QUANTITY,DISCOUNT,DELIVERY_MODE,WEIGHT_LB) VALUES (1155,1009,5,10,'Express',0.3);
INSERT INTO ORDER_ITEMS (ORDER_ID,PRODUCT_ID,QUANTITY,DISCOUNT,DELIVERY_MODE,WEIGHT_LB) VALUES (1166,1000,2,5,'Pickup',8);
INSERT INTO ORDER_ITEMS (ORDER_ID,PRODUCT_ID,QUANTITY,DISCOUNT,DELIVERY_MODE,WEIGHT_LB) VALUES (1177,1004,1,4,'Express',2.5);
INSERT INTO ORDER_ITEMS (ORDER_ID,PRODUCT_ID,QUANTITY,DISCOUNT,DELIVERY_MODE,WEIGHT_LB) VALUES (1188,1001,1,2,'Express',0.025);
INSERT INTO ORDER_ITEMS (ORDER_ID,PRODUCT_ID,QUANTITY,DISCOUNT,DELIVERY_MODE,WEIGHT_LB) VALUES (1221,1010,1,10,'Express',0.25);

COMMIT;

--1) Select all columns and all rows from one table
SELECT * FROM PRODUCT;

--2) Select five columns and all rows from one table
SELECT CUSTOMER_ID, FIRST_NAME, LAST_NAME, ADDRESS, DOB FROM CUSTOMER;

--3) Select all columns from all rows from one view
Select * From Wishlist_View;

--4) Using a join on 2 tables, select all columns and all rows from the tables without the use of a Cartesian product 

SELECT * 
FROM ORDERS O INNER JOIN ORDER_ITEMS OI
ON O.ORDER_ID = OI.ORDER_ID;

--5) Select and order data retrieved from one table
SELECT *
FROM CUSTOMER
ORDER BY DOB;

--6) Using a join on 3 tables, select 5 columns from the 3 tables. Use syntax that would limit the output to 10 rows

SELECT P.PRODUCT_ID, O.ORDER_ID, P.PRODUCT_NAME, O.ORDER_DATE, OI.QUANTITY
FROM ORDERS O INNER JOIN ORDER_ITEMS OI
ON O.ORDER_ID = OI.ORDER_ID
INNER JOIN PRODUCT P
ON  OI.PRODUCT_ID = P.PRODUCT_ID
FETCH FIRST 10 ROWS ONLY;

--7) Select distinct rows using joins on 3 tables

SELECT DISTINCT P.PRODUCT_ID, O.ORDER_ID, P.PRODUCT_NAME, O.ORDER_DATE, OI.QUANTITY
FROM ORDERS O INNER JOIN ORDER_ITEMS OI
ON O.ORDER_ID = OI.ORDER_ID
INNER JOIN PRODUCT P
ON  OI.PRODUCT_ID = P.PRODUCT_ID;

--8) Use GROUP BY and HAVING in a select statement using one or more tables
SELECT O.ORDER_DATE, OI.QUANTITY
FROM ORDERS O INNER JOIN ORDER_ITEMS OI
ON O.ORDER_ID = OI.ORDER_ID
GROUP BY O.ORDER_DATE, OI.QUANTITY
HAVING OI.QUANTITY > 2;

--9) Use IN clause to select data from one or more tables
SELECT ORDER_ID, PRODUCT_ID
FROM ORDER_ITEMS
WHERE QUANTITY IN (5 ,6, 7);

--10) Select length of one column from one table (use LENGTH function)
SELECT LENGTH(ARTICLE_DESCRIPTION) 
FROM ARTICLE;

/*--11) Delete one record from one table. 
Use select statements to demonstrate the table contents before and after the DELETE statement. 
Make sure you use ROLLBACK afterwards so that the data will not be physically removed*/

Select * from Customer;

Delete from Customer
where Customer_ID = 202372;

Select * from Customer;

Rollback;


/*--12) Update one record from one table.
Use select statements to demonstrate the table contents before and after the UPDATE statement.
Make sure you use ROLLBACK afterwards so that the data will not be physically removed */

Select * from Customer;

Update Customer
Set LAST_Name = 'Brooks'
where Customer_ID = 202372;

Select * from Customer;

Rollback;

--13) List all the articles that are linked to atleast one product.
SELECT A.ARTICLE_ID, COUNT(*)
FROM ARTICLE A INNER JOIN PRODUCT P
ON A.ARTICLE_ID = P.ARTICLE_ID
GROUP BY A.ARTICLE_ID
ORDER BY COUNT(*) DESC; 

--14)List all the products that have previous_count greater than the average previous_count of all the products.
SELECT PRODUCT_ID, PREVIOUS_COUNT, (SELECT ROUND(AVG(PREVIOUS_COUNT)) FROM PRODUCT) AS AVERAGE
FROM PRODUCT
WHERE PREVIOUS_COUNT >=(SELECT ROUND(AVG(PREVIOUS_COUNT)) FROM PRODUCT);

--15)LIST DETAILS OF CUSTOMERS WHO HAVE ORDERED PRODUCTS WHICH ARE SPONSORED AN ARTICLE ID 100.
SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, O.ORDER_ID FROM CUSTOMER C
LEFT JOIN ORDERS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID
LEFT JOIN ORDER_ITEMS OI
ON O.ORDER_ID = OI.ORDER_ID
LEFT JOIN PRODUCT P
ON P.PRODUCT_ID = OI.PRODUCT_ID
WHERE P.PRODUCT_ID = ANY(SELECT P.PRODUCT_ID FROM PRODUCT P JOIN ARTICLE A ON P.ARTICLE_ID = A.ARTICLE_ID WHERE A.ARTICLE_ID = 100);


--16)LIST DETAILS OF CUSTOMERS WHO HAVE ORDERED PRODUCTS WHICH ARE NOT SPONSORED BY ANY ARTICLE.
SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, O.ORDER_ID FROM CUSTOMER C
LEFT JOIN ORDERS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID
LEFT JOIN ORDER_ITEMS OI
ON O.ORDER_ID = OI.ORDER_ID
LEFT JOIN PRODUCT P
ON P.PRODUCT_ID = OI.PRODUCT_ID
WHERE P.PRODUCT_ID = (SELECT PRODUCT_ID FROM PRODUCT WHERE ARTICLE_ID IS NULL);

--17)LIST DETAILS OF CUSTOMERS WHO HAVE PRODUCTS IN THEIR WISHLIST THAT WERE ORDERED ATLEAST ONCE PREVIOUSLY, PRINT PREVIOUS COUNT AND NUMBER OF PRODUCTS.
SELECT P.PREVIOUS_COUNT,C.CUSTOMER_ID,C.FIRST_NAME,C.LAST_NAME,COUNT(*) AS COUNT
FROM CUSTOMER C INNER JOIN WISHLIST W
ON C.CUSTOMER_ID = W.CUSTOMER_ID
INNER JOIN PRODUCT P
ON W.PRODUCT_ID = P.PRODUCT_ID
GROUP BY P.PREVIOUS_COUNT,C.CUSTOMER_ID,C.FIRST_NAME,C.LAST_NAME
HAVING P.PREVIOUS_COUNT>0
ORDER BY P.PREVIOUS_COUNT;

--18)SELECT CUSTOMER AND ORDER DETAILS OF ALL ORDERS PLACED AFTER 2021.

SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, O.ORDER_ID, O.ORDER_DATE, P.PRODUCT_NAME, P.BRAND, OI.QUANTITY
FROM CUSTOMER C
LEFT JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID
LEFT JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID
LEFT JOIN PRODUCT P ON P.PRODUCT_ID = OI.PRODUCT_ID
WHERE EXTRACT(YEAR FROM O.ORDER_DATE) >= 2021
ORDER BY O.ORDER_DATE DESC;

--19)Displaying the total revenue earned from each product type

SELECT P.PRODUCT_TYPE, SUM(OI.QUANTITY * OI.DISCOUNT * P.PREVIOUS_COUNT) AS REVENUE FROM PRODUCT P
JOIN ORDER_ITEMS OI ON P.PRODUCT_ID = OI.PRODUCT_ID 
JOIN ORDERS O ON OI.ORDER_ID = O.ORDER_ID 
GROUP BY P.PRODUCT_TYPE 
ORDER BY REVENUE DESC;

--20)Customer and Product details of coustomers who ordered MORE THAN 5 in the month of Sept 2023

SELECT C.CUSTOMER_ID, C.FIRST_NAME, C.LAST_NAME, P.PRODUCT_NAME, P.BRAND FROM CUSTOMER C 
JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID 
JOIN ORDER_ITEMS OI ON O.ORDER_ID = OI.ORDER_ID 
JOIN PRODUCT P ON P.PRODUCT_ID = OI.PRODUCT_ID WHERE C.CUSTOMER_ID IN 
(SELECT CUSTOMER_ID FROM ORDERS
WHERE EXTRACT(YEAR FROM O.ORDER_DATE)= 2023 AND EXTRACT(MONTH FROM O.ORDER_DATE)= 09 
GROUP BY CUSTOMER_ID 
HAVING SUM(O.ORDER_TOTAL) >= 5);


select p.product_id from product p inner join article a on a.article_id = p.product_id where a.article_id = 100;

select article_name from Article where article_id = 100;